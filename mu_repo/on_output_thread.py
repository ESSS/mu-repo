'''
Created on 28/05/2012

@author: Fabio Zadrozny
'''

import threading
from mu_repo.print_ import Print, PrintError
from mu_repo.execute_git_command_in_thread import Output


#===================================================================================================
# OnOutputThread
#===================================================================================================
class OnOutputThread(threading.Thread):

    FINISH_PROCESSING_ITEM = ()

    def __init__(self, output_queue, on_output):
        threading.Thread.__init__(self)
        self.output_queue = output_queue
        self.on_output = on_output
        self.setDaemon(True)


    def run(self):
        while True:
            action = self.output_queue.get(True)
            try:
                if action is self.FINISH_PROCESSING_ITEM:
                    return
                if isinstance(action, Output):
                    self.on_output(action)
                else:
                    Print(action) #Progress message.
            except:
                PrintError()

            finally:
                self.output_queue.task_done()


#===================================================================================================
# ExecuteThreadsHandlingOutputQueue
#===================================================================================================
def ExecuteThreadsHandlingOutputQueue(threads, output_queue, on_output):
    '''
    :param on_output: callable(Output)
        A callable that's called with the Output generated by each thread executed.
    '''
    queue_printer_thread = OnOutputThread(output_queue, on_output)

    for t in threads:
        t.start()

    queue_printer_thread.start()

    for t in threads:
        try:
            total_timeout = 0.0
            timeout = 5.0
            while True:
                t.join(timeout=timeout)
                if t.isAlive():
                    total_timeout += timeout
                    output_queue.put('  %s (already waited %.2f seconds)' % (t, total_timeout))
                else:
                    break

        except (KeyboardInterrupt, SystemExit):
            Print('Stopping when executing: %s' % (t,))
            raise

    output_queue.put(OnOutputThread.FINISH_PROCESSING_ITEM)
    output_queue.join()
